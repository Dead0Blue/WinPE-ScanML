import warnings
from sklearn.exceptions import InconsistentVersionWarning
warnings.filterwarnings("ignore", category=InconsistentVersionWarning)

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import joblib
import pandas as pd
import hashlib
import os
import pefile
import threading

# --- Configuration Th√®me sombre ---
BG_COLOR = "#2E2E2E"
FG_COLOR = "#E0E0E0"
ACCENT = "#2196F3"
CARD_BG = "#383838"
BUTTON_BG = "#424242"
BUTTON_ACTIVE = "#555555"

# Charger ressources du mod√®le
def load_resources():
    try:
        with warnings.catch_warnings():
            warnings.filterwarnings("ignore", category=InconsistentVersionWarning)
            model = joblib.load('modele_regression_logistique.pkl')
            scaler = joblib.load('scaler.pkl')
            feature_columns = joblib.load('features_columns.pkl')
        return model, scaler, feature_columns
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur de chargement: {e}")
        return None, None, None

# Extraction des caract√©ristiques
def extract_features(file_path):
    try:
        pe = pefile.PE(file_path)
        feats = {
            'SizeOfOptionalHeader': pe.OPTIONAL_HEADER.SizeOfHeaders,
            'Characteristics': pe.FILE_HEADER.Characteristics,
            'MajorLinkerVersion': pe.OPTIONAL_HEADER.MajorLinkerVersion,
            'MinorLinkerVersion': pe.OPTIONAL_HEADER.MinorLinkerVersion,
            'SizeOfCode': pe.OPTIONAL_HEADER.SizeOfCode,
            'SizeOfInitializedData': pe.OPTIONAL_HEADER.SizeOfInitializedData,
            'SizeOfUninitializedData': pe.OPTIONAL_HEADER.SizeOfUninitializedData,
            'AddressOfEntryPoint': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
            'BaseOfCode': pe.OPTIONAL_HEADER.BaseOfCode,
        }
        return pd.DataFrame([feats])
    except Exception as e:
        raise RuntimeError(f"Erreur d'extraction des caract√©ristiques: {e}")

# Pr√©traitement
def preprocess_data(df, cols, scaler):
    try:
        for c in cols:
            if c not in df:
                df[c] = 0
        X = df[cols].astype(float)
        return scaler.transform(X)
    except Exception as e:
        raise ValueError(f"Erreur de pr√©traitement: {e}")

# Calcul des hashes
def calculate_hashes(file_path):
    try:
        with open(file_path, 'rb') as f:
            data = f.read()
            sha256 = hashlib.sha256(data).hexdigest()
            md5 = hashlib.md5(data).hexdigest()
        return sha256, md5
    except Exception as e:
        raise IOError(f"Erreur de lecture du fichier: {e}")

# Application principale
class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("D√©tecteur de Malware PE")
        self.geometry("900x600")
        self.configure(bg=BG_COLOR)
        self.resizable(False, False)

        # Charger le mod√®le
        self.model, self.scaler, self.features = load_resources()
        if not self.model:
            self.destroy()
            return

        # Layout
        self.nav_frame = tk.Frame(self, bg=BG_COLOR, width=200)
        self.nav_frame.pack(side=tk.LEFT, fill=tk.Y)
        self.main_frame = tk.Frame(self, bg=BG_COLOR)
        self.main_frame.pack(side=tk.RIGHT, expand=True, fill=tk.BOTH)

        self.build_nav()
        self.build_main()

    def build_nav(self):
        buttons = [
            ("Dashboard", None),
            ("Analyse de fichiers", self.select_file),
            ("Historique", None),
            ("Param√®tres", None)
        ]
        for text, cmd in buttons:
            btn = tk.Button(
                self.nav_frame,
                text=text,
                command=cmd if cmd else lambda: None,
                bg=BUTTON_BG,
                fg=FG_COLOR,
                activebackground=BUTTON_ACTIVE,
                bd=0,
                font=(None, 12),
                pady=10
            )
            btn.pack(fill=tk.X, pady=2)

    def build_main(self):
        # Zone d√©p√¥t
        self.drop_card = tk.Label(
            self.main_frame,
            text="D√©posez un fichier ou cliquez pour s√©lectionner",
            bg=CARD_BG,
            fg=FG_COLOR,
            font=(None, 14),
            relief=tk.RIDGE,
            bd=2,
            padx=20,
            pady=40
        )
        self.drop_card.pack(pady=30, padx=30, fill=tk.X)
        self.drop_card.bind("<Button-1>", lambda e: self.select_file())

        # Progress Bar
        self.progress = ttk.Progressbar(
            self.main_frame,
            orient='horizontal',
            mode='determinate',
            length=400
        )
        self.progress.pack(pady=10)

        # R√©sultats
        self.result_card = tk.Frame(
            self.main_frame,
            bg=CARD_BG,
            relief=tk.RIDGE,
            bd=2,
            padx=10,
            pady=10
        )
        self.result_card.pack(pady=20, padx=30, fill=tk.X)
        self.clear_results()

        # Relancer
        self.btn_restart = tk.Button(
            self.main_frame,
            text="Nouvelle analyse",
            command=self.clear_results,
            bg=ACCENT,
            fg='white',
            font=(None, 12, 'bold'),
            bd=0,
            padx=15,
            pady=8
        )
        self.btn_restart.pack(pady=10)

    def select_file(self):
        fp = filedialog.askopenfilename(
            filetypes=[("PE Executable", "*.exe *.dll")]
        )
        if fp:
            self.start_analysis(fp)

    def start_analysis(self, path):
        threading.Thread(target=self.analyze, args=(path,), daemon=True).start()

    def analyze(self, path):
        try:
            self.progress['value'] = 20
            self.update_idletasks()
            sha, md5 = calculate_hashes(path)
            self.progress['value'] = 40
            self.update_idletasks()
            feats = extract_features(path)
            data = preprocess_data(feats, self.features, self.scaler)
            self.progress['value'] = 70
            self.update_idletasks()
            pred = self.model.predict(data)[0]
            prob = self.model.predict_proba(data)[0][1]
            status = "MALICIEUX üö®" if pred == 1 else "BENIN ‚úÖ"
            color = "#F44336" if pred == 1 else "#4CAF50"
            self.progress['value'] = 100
            self.update_idletasks()
            self.show_results(name=os.path.basename(path), status=status, probability=prob, sha=sha, md5=md5, color=color)
        except Exception as e:
            messagebox.showerror("Erreur", f"√âchec de l'analyse: {e}")

    def clear_results(self):
        for w in self.result_card.winfo_children():
            w.destroy()
        lbl = tk.Label(
            self.result_card,
            text="Aucun r√©sultat",
            bg=CARD_BG,
            fg=FG_COLOR,
            font=(None, 12)
        )
        lbl.pack()

    def show_results(self, name, status, probability, sha, md5, color):
        for w in self.result_card.winfo_children():
            w.destroy()
        # Nom du fichier
        tk.Label(self.result_card, text=name, bg=CARD_BG, fg=FG_COLOR, font=(None, 14, 'bold')).pack(anchor='w')
        ttk.Separator(self.result_card, orient=tk.HORIZONTAL).pack(fill=tk.X, pady=5)
        # D√©tails
        tk.Label(self.result_card, text=status, bg=CARD_BG, fg=color, font=(None, 12, 'bold')).pack(anchor='w', pady=2)
        tk.Label(self.result_card, text=f"Confiance : {probability:.2%}", bg=CARD_BG, fg=FG_COLOR).pack(anchor='w')
        tk.Label(self.result_card, text=f"SHA256 : {sha[:12]}...", bg=CARD_BG, fg=FG_COLOR).pack(anchor='w')
        tk.Label(self.result_card, text=f"MD5 : {md5[:8]}...", bg=CARD_BG, fg=FG_COLOR).pack(anchor='w')

if __name__ == "__main__":
    App().mainloop()
